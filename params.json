{"name":"Nodejs-tk102","body":"## TK102 GPS server for Node.js\r\n\r\n[![Build Status](https://secure.travis-ci.org/fvdm/nodejs-tk102.png?branch=master)](http://travis-ci.org/fvdm/nodejs-tk102)\r\n\r\nThe Xexun TK102 is a GPS device that can send coordinates over TCP to a server via GPRS. This Node.js script creates a TCP server that listens for GPRMC data, parsing it and dump it to the console. The parsed data is provided in a clean easy to use object, so you can easily store it in a database or push to a websocket server, for example.\r\n\r\n## Prepare device\r\n\r\nAssuming your simcard has enough SMS and data credits and the TK102 is configured for your provider's APN, simply send **adminip123456 IP PORT** where obviously IP is the server's IP and PORT is the port to listen on :) It cannot take hostnames as it has no dns features on board.\r\n\r\nActivate sending coordinates: **t030s003n123456**\r\n\r\nThis tells the device to send its location AFTER each **30** seconds and no more than **3** times. 30 seconds is the minimum. Send t030s\\*\\*\\*n123456 to go on for infinity. **s** can also be **m** or **h**. To kill send notn123456.\r\n\r\n## Installation\r\n\r\nEither load the module with NPM:\r\n\r\n**npm install tk102**\r\n\r\n```javascript\r\nvar server = require('tk102');\r\n```\r\n\r\nor load directly:\r\n\r\n```javascript\r\nvar server = require('/path/to/tk102.js');\r\n```\r\n\r\n## Usage\r\n\r\n```javascript\r\nvar server = require('tk102');\r\n\r\n// start server\r\nserver.createServer({\r\n        port: 1337\r\n});\r\n\r\n// incoming data\r\nserver.on( 'track', function( gps ) {\r\n        console.log( gps );\r\n});\r\n```\r\n\r\n## Settings\r\n\r\n```javascript\r\nserver.createServer({\r\n        ip:          '1.2.3.4',  // default 0.0.0.0 (all ips)\r\n        port:        0,          // default 0 = random, see 'listening' event\r\n        connections: 10,         // simultaneous connections\r\n        timeout:     10          // idle timeout in seconds\r\n});\r\n```\r\n\r\n## Events\r\n\r\n### track\r\n\r\nThe GPRMC push from the device.\r\n\r\n```javascript\r\nserver.on( 'track', function( gps ) {\r\n        { raw: '1203301642,0031698765432,GPRMC,144219.000,A,5213.0327,N,00516.7759,E,0.63,179.59,300312,,,A*6D,F,imei:123456789012345,123',\r\n          datetime: '2012-03-30 16:42',\r\n          phone: '0031698765432',\r\n          gps: { date: '2012-03-30', time: '14:42:19.000', signal: 'full', fix: 'active' },\r\n          geo: { latitude: 52.130326, longitude: 5.167759, bearing: 179 },\r\n          speed: { knots: 0.63, kmh: 1.167, mph: 0.725 },\r\n          imei: '123456789012345' };\r\n});\r\n```\r\n\r\n* **raw:** the input string without trailing whitespace\r\n* **datetime:** the device 24h clock\r\n* **phone:** the admin phonenumber that initiated this tracking\r\n* **gps:**\r\n\t* **date:** date as received from satellites\r\n\t* **time:** time in 24h UTC as received from satellites\r\n\t* **signal:** GPS signal strength, either _full_ or _low_\r\n\t* **fix:** GPS fix, either _active_ or _invalid_\r\n* **geo:**\r\n\t* **latitude:** position latitude\r\n\t* **longitude:** position longitude\r\n\t* **bearing:** direction in degrees\r\n* **speed:**\r\n\t* **knots:** speed in knots per hour\r\n\t* **kmh:** speed in kilometer per hour\r\n\t* **mph:** speed in miles per hour\r\n* **imei:** device IMEI\r\n\r\n### data\r\n\r\nThe raw unprocessed inbound data.\r\n\r\n```javascript\r\nserver.on( 'data', function( raw ) {\r\n        console.log( 'Incoming data: '+ raw );\r\n});\r\n```\r\n\r\n### listening\r\n\r\nVery useful to find out random port (0).\r\n\r\n```javascript\r\nserver.on( 'listening', function( listen ) {\r\n        { port: 56751, family: 2, address: '0.0.0.0' }\r\n});\r\n```\r\n\r\n### connection\r\n\r\nEmitted when a connection is established with the server, includes the socket.\r\n\r\n```javascript\r\nserver.on( 'connection', function( socket ) {\r\n        console.log( 'Connection from '+ socket.remoteAddress );\r\n});\r\n```\r\n\r\n### timeout\r\n\r\nEmitted when a connection expires.\r\n\r\n```javascript\r\nserver.on( 'timeout', function( socket ) {\r\n        console.log( 'Time-out from '+ socket.remoteAddress );\r\n});\r\n```\r\n\r\n## Note\r\n\r\nI'm not sure how this works with TK102-2 and other similar devices, I wrote this strictly for the TK102 as I only have one of those. There is no security built in, anyone could push GPRMC data to your server.\r\n\r\n## License\r\n\r\nThis code is released under COPYLEFT meaning you can do with it\r\nanything you like except copyrighting it. If possible it would\r\nbe nice to include the source URL for future reference:\r\n\r\nhttps://github.com/fvdm/nodejs-tk102","tagline":"Server for Xexun TK102 GPS","google":"UA-3580504-53","note":"Don't delete this file! It's used internally to help with page regeneration."}